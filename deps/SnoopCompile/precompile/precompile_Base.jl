function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    isdefined(Base, Symbol("##with_output_color#707")) && precompile(Tuple{getfield(Base, Symbol("##with_output_color#707")), Bool, typeof(Base.with_output_color), typeof(identity), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.CoreLogging.logmsg_code), Module, String, Int64, Expr, Expr, Expr, Expr})
    precompile(Tuple{typeof(Base.CoreLogging.log_record_id), Module, Expr, Expr, Tuple{Expr, Expr}})
    precompile(Tuple{typeof(Base.reverse), Array{Expr, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.reverse), Array{Symbol, 1}, Int64, Int64})
    precompile(Tuple{typeof(Base.nextpow), Int64, Int64})
    precompile(Tuple{typeof(Base.:(==)), WeakRef, Tuple{Int64, Int64}})
    precompile(Tuple{typeof(Base.collect_to_with_first!), Array{QuoteNode, 1}, QuoteNode, Base.Generator{Array{Any, 1}, Type{QuoteNode}}, Int64})
    precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.CoreLogging.LogLevel})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.esc), Tuple{Base.Broadcast.Extruded{Array{Expr, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.first), String})
    precompile(Tuple{typeof(Base._throw_dmrs), Int64, String, Tuple{Int64, Int64}})
    precompile(Tuple{typeof(Base.vect), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
    precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Array{Tuple{Int64, Int64}, 1}})
    precompile(Tuple{typeof(Base.println), Test.Fail})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(Base.esc)}})
    precompile(Tuple{typeof(Base.debug_color)})
    precompile(Tuple{typeof(Base.warn_color)})
    precompile(Tuple{typeof(Base.throw_boundserror), Base.Broadcast.Broadcasted{Nothing, Tuple{Base.OneTo{Int64}}, typeof(Base.esc), Tuple{Base.Broadcast.Extruded{Array{Symbol, 1}, Tuple{Bool}, Tuple{Int64}}}}, Tuple{Int64}})
    precompile(Tuple{typeof(Base.iterate), Array{Int64, 1}})
    isdefined(Base, Symbol("#kw##printstyled")) && precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
    precompile(Tuple{typeof(Base.:(==)), Array{Int64, 2}, Array{Int64, 2}})
    precompile(Tuple{typeof(Base.:(==)), Array{Int64, 2}, Base.ReshapedArray{Int64, 2, Base.UnitRange{Int64}, Tuple{}}})
    precompile(Tuple{typeof(Base.print), Test.Fail})
    precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
    precompile(Tuple{typeof(Base.:(==)), Array{Int64, 1}, Array{Int64, 1}})
    precompile(Tuple{typeof(Base.iterate), Array{Int64, 1}, Int64})
    isdefined(Base, Symbol("#kw##printstyled")) && precompile(Tuple{getfield(Base, Symbol("#kw##printstyled")), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
    precompile(Tuple{typeof(Base.pathof), Module})
    precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
    isdefined(Base, Symbol("#kw##with_output_color")) && precompile(Tuple{getfield(Base, Symbol("#kw##with_output_color")), NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), typeof(identity), Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
    precompile(Tuple{typeof(Base.vect), Expr})
    isdefined(Base, Symbol("#@logmsg")) && precompile(Tuple{getfield(Base.CoreLogging, Symbol("#@logmsg")), LineNumberNode, Module, Int, Int})
    precompile(Tuple{typeof(Base.reverse), Array{Expr, 1}})
    precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
    precompile(Tuple{typeof(Base._array_for), Type{Expr}, Array{Any, 1}, Base.HasShape{1}})
    precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Array{Any, 1}, Base.HasShape{1}})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64})
    precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Int64, Int64})
    precompile(Tuple{typeof(Base.isempty), Array{Test.AbstractTestSet, 1}})
    isdefined(Base, Symbol("##printstyled#708")) && precompile(Tuple{getfield(Base, Symbol("##printstyled#708")), Bool, Symbol, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, String})
    precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Symbol, String, String}, Int64, Int64})
    precompile(Tuple{typeof(Base.afoldl), typeof(Base.:(+)), Int64, Int64, Int64})
    precompile(Tuple{typeof(Base.:(==)), Bool, Bool})
    precompile(Tuple{typeof(Base.Iterators.product), Base.UnitRange{Int64}, Base.UnitRange{Int64}})
    precompile(Tuple{typeof(Base.:(==)), Symbol, Symbol})
    precompile(Tuple{typeof(Base.MainInclude.include), String})
    precompile(Tuple{typeof(Base.is_quoted), Float64})
    precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64, Int64, Int64})
    precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, Type{QuoteNode}}})
    precompile(Tuple{typeof(Base.reshape), Base.UnitRange{Int64}, Int64, Int64})
    precompile(Tuple{typeof(Base.reverse), Array{Symbol, 1}})
end
